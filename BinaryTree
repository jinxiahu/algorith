剑指offer算法实现
一直二叉树的前序遍历和中序遍历，重构二叉树
前序遍历为{1,2,4,7,3,5,6,8}
中序遍历为{4,7,2,1,5,3,8,6}
思路：
   使用递归的方法从根节点开始返回，对于前序遍历的第一个值就是根节点的值，然后在中序遍历中找到该值，并记录索引，从而得到左右子树的索引号
 java代码如下:
 //创建二叉树的节点：
 package testoffer;

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    
    TreeNode(int x) { val = x;
   }
   }
//重构二叉树
 package testoffer;
public class Solution {
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
           TreeNode root=reConstructBinaryTree(pre,0,pre.length-1,in,0,in.length-1);
           return root;
    }
    //前序遍历{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}
    private TreeNode reConstructBinaryTree(int [] pre,int startPre,int endPre,int [] in,int startIn,int endIn) {
         
        if(startPre>endPre||startIn>endIn)
            return null;
        
        TreeNode root = new TreeNode(pre[startPre]);
         
        for(int i=startIn;i<=endIn;i++)
            if(in[i]==pre[startPre]){
                root.left=reConstructBinaryTree(pre,startPre+1,startPre+i-startIn,in,startIn,i-1);
                root.right=reConstructBinaryTree(pre,i-startIn+startPre+1,endPre,in,i+1,endIn);
                      break;
            }
                 
        return root;  
    }
}
 
 
 测试代码
 package testoffer;

public class TestSolution {
	public static void main(String[] args) {
			int[] pre = {1,2,4,7,3,5,6,8};
			int[] in = {4,7,2,1,5,3,8,6};
			Solution solve = new Solution();			
			TreeNode root = solve.reConstructBinaryTree(pre, in);		
			printTreeNode(root);
			}
			
	public static void printTreeNode(TreeNode node) {
		if(node!=null) {
			System.out.print(node.val+" ");//前序遍历输出二叉树
			printTreeNode(node.left);
			//System.out.print(node.val+" ");//中序遍历输出二叉树
			printTreeNode(node.right);
		}
	}
}

